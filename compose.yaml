version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  fetcher:
    image: "${FETCHER_IMAGE_REPO}:${FETCHER_IMAGE_TAG}"
    container_name: fetcher
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fetcher.rule=PathPrefix(`/fetcher`)"
      - "traefik.http.routers.fetcher.middlewares=strip-fetcher"
      - "traefik.http.middlewares.strip-fetcher.stripprefix.prefixes=/fetcher"
      - "traefik.http.services.fetcher.loadbalancer.server.port=3000"
#    ports:
#      - 3000:3000
    secrets:
      - db-password
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=diagscale_todo
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
    depends_on:
      - postgres
      - db-prep 

  postgres:
    image: postgres
    restart: always
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=diagscale_todo
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=postgres
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db-prep:
    image: "${DB_PREP_IMAGE_REPO}:${DB_PREP_IMAGE_TAG}"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_DB=diagscale_todo
    depends_on:
      postgres:
        condition: service_healthy
    secrets:
      - db-password

volumes:
  db-data:

secrets:
  db-password:
    file: compose-secrets/db/password.txt
